const fs = require('fs');
const axios = require('axios');
const path = require('path');
const CJSON =  require('comment-json');

// üîê API ÌÇ§ Î∂àÎü¨Ïò§Í∏∞
const API_KEY = fs.readFileSync( path.join(__dirname, 'api-key.txt'), 'utf8').trim();

// ‚öôÔ∏è ÏÑ§Ï†ï Î∂àÎü¨Ïò§Í∏∞
const configPath = path.join(__dirname, 'config.json');
const configObject = fs.readFileSync(configPath, 'utf8');
const config = CJSON.parse(configObject, null);


const API_URL = config.API_URL;
const MODEL = config.MODEL;
const BATCH_SIZE = config.BATCH_SIZE;
const USER_PROMPT = config.USER_PROMPT;
const SYSTEM_PROMPT = config.SYSTEM_PROMPT;

function chunkArray(array, size) {
    return array.reduce((acc, _, i) =>
        i % size ? acc : [...acc, array.slice(i, i + size)], []);
}

function extractJsonFromMarkdown(responseText) {
    const match = responseText.match(/```json\s*([\s\S]*?)```/);
    if (match) {
        return match[1];
    }
    return responseText;
}

async function translateBatch(batch) {
    const batchJson = Object.fromEntries(batch);

    const prompt = `${USER_PROMPT}\n\n${CJSON.stringify(batchJson, null, 4)}`;

    const headers = {
        'Authorization': `Bearer ${API_KEY}`,
        'Content-Type': 'application/json'
    };

    const data = {
        model: MODEL,
        messages: [
            { 
                role: 'system', 
                content: SYSTEM_PROMPT
            },
            { 
                role: 'user', 
                content: prompt
            }
        ]
    };

    try {
        const response = await axios.post(API_URL, data, { headers });
        let content = response.data.choices?.[0]?.message?.content?.trim();

        // ÎßàÌÅ¨Îã§Ïö¥ ÏΩîÎìú Î∏îÎü≠ Ï†úÍ±∞
        content = extractJsonFromMarkdown(content);

        return CJSON.parse(content, null);
    } catch (err) {
        console.error('‚ùå Î≤àÏó≠ Ïã§Ìå®:', err.response?.data || err.message);
        return {};
    }
}

async function main() {
    const inputPath = './input.json';
    const outputPath = './output.json';

    const inputText = fs.readFileSync(inputPath, 'utf8');
    const inputData = CJSON.parse(inputText, null);

    const entries = Object.entries(inputData);
    const chunks = chunkArray(entries, BATCH_SIZE);

    for (let i = 0; i < chunks.length; i++) {
        console.log(`üîÑ Î≤àÏó≠ Ï§ë (${i + 1}/${chunks.length})...`);
        const translatedChunk = await translateBatch(chunks[i]);

        // ‚úÖ Ï£ºÏÑù Í∞ùÏ≤¥Ïóê ÏßÅÏ†ë ÎçÆÏñ¥Ïì∞Í∏∞
        for (const [key, value] of Object.entries(translatedChunk)) {
            inputData[key] = value;
        }
    }

    // ‚úÖ ÏõêÎ≥∏ Íµ¨Ï°∞ Í∑∏ÎåÄÎ°ú Ï†ÄÏû• (Ï£ºÏÑù Ïú†ÏßÄ)
    fs.writeFileSync(outputPath, CJSON.stringify(inputData, null, 4), 'utf8');
    console.log('‚úÖ Î≤àÏó≠ ÏôÑÎ£å! output.jsonÏóê Ï†ÄÏû•Îê®.');
}

main();